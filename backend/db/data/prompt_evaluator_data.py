from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
from datetime import datetime
from dataclasses import dataclass, field

@dataclass
class PromptEvaluator(BaseModel):
    id: Optional[str] = Field(
        default=None,
        alias="_id",
        description="Unique identifier for the evaluation (auto-generated by MongoDB)",
        examples=["62c123456789abcdef123456"]
    )
    user_query: str = Field(
        description="The user query for evaluation",
        examples=["Create a snake game in Python."]
    )
    evaluation_method: str = Field(
        ...,
        description="The evaluation method used (e.g., 'human' or 'llm')",
        examples=["evaluator_human", "evaluator_llm"]
    )
    provider: str = Field(
        ...,
        description="Which provider was chosen (e.g., openai, claude)",
        examples=["openai", "claude"]
    )
    model: str = Field(
        description="The AI model used for evaluation",
        examples=["gpt-3.5-turbo", "gpt-4o", "claude-3-5-haiku-latest"]
    )
    evaluation_result: dict = field(
        default_factory=dict,
        metadata={"description": "The evaluation result parsed as a JSON object"}
    )
    parsed_result_after_comparison: dict = field(
        default_factory=dict,
        metadata={"description": "The comparison result parsed as a JSON object"}
    )
    user_verdict_after_comparison: str = Field(
        default="Better",
        description="User feedback after prompt comparison",
        examples=["Worse", "Tie", "Better"]
    )
    optimized_user_query: Optional[str] = Field(
        default=None,
        description="Optimized query for comparison to original query",
        examples=["Create a enhanced snake game in Python with many examples."]
    )
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp when the evaluation was created"
    )
    updated_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp when the evaluation was last updated"
    )
    is_deleted: bool = Field(
        default=False,
        description="Flag indicating whether the evaluation is deleted"
    )

    class Config:
        populate_by_name = True
        from_attributes = True
